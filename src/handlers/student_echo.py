from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import src.db.crud.student_crud as crud
import src.keyboards.student_kb as kb

import logging


logging.basicConfig(level=logging.INFO)
router_main: Router = Router()

# —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–≤ –∑–∞–¥–∞–Ω–∏–π

@router_main.callback_query(F.data == 'show_disciplines_and_teachers')
async def show_disciplines_and_teachers(callback: CallbackQuery):
    await callback.answer('')
    data = crud.get_disciplines_and_teachers(str(callback.from_user.id))

    if not data or isinstance(data, str):  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await callback.message.answer(data if isinstance(data, str) else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ö –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    message_text = "*–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:*\n\n" + "\n".join(
        f"üìö {entry.split(' | ')[0]}\nüë®‚Äçüè´ {entry.split(' | ')[1]} \n" for entry in data
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(message_text, parse_mode="Markdown")


@router_main.callback_query(F.data == 'show_group_members')
async def show_group_members(callback: CallbackQuery):
    await callback.answer('')
    student = crud.get_student_by_telegram_id(str(callback.from_user.id))

    if not student:
        await callback.message.answer("–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    group_number = student.group_number
    group_members = crud.get_group_members(str(callback.from_user.id))

    if isinstance(group_members, str):  # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await callback.message.answer(group_members)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π
    result_list = "\n".join(f"\t{member}" for member in group_members)
    message_text = f"üë•*–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã {group_number}:*\n\n{result_list}"

    await callback.message.answer(message_text, parse_mode="Markdown")






class CheckTask(StatesGroup):
    discipline = State()
    task_id = State()
    task_view = State()
    process_file = State()
    idle = State()

# –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è
@router_main.callback_query(F.data == 'browse_task')
async def browse_task(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    disciplines = crud.get_student_disciplines(str(callback.from_user.id))
    result_list = "\n".join(f"{i + 1}. {d}" for i, d in enumerate(disciplines))
    message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, –≤–≤–µ–¥—è –µ—ë –Ω–æ–º–µ—Ä:\n{result_list}"

    await callback.message.answer(message_text, reply_markup=kb.back_to_main_menu_kb)
    await state.update_data(disciplines=disciplines)
    await state.set_state(CheckTask.discipline)

# –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
@router_main.message(CheckTask.discipline)
async def select_discipline(message: Message, state: FSMContext):
    state_data = await state.get_data()
    disciplines = state_data.get('disciplines')
    selected_number = int(message.text.strip()) - 1
    await state.update_data(message_tasks=message)
    if 0 <= selected_number < len(disciplines):
        selected_discipline = disciplines[selected_number]
        await state.update_data(selected_discipline=selected_discipline)
        tasks = crud.get_student_tasks(selected_discipline, str(message.from_user.id))
        result_list = "\n".join(f"{i + 1}.  ‚ùï{d.task_type}\nüîé{d.task_name}\n‚è≥–°–¥–∞—Ç—å –¥–æ {d.due_date}\n" for i, d in enumerate(tasks))
        message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É: {selected_discipline}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –≤–≤–µ–¥—è –µ–≥–æ –Ω–æ–º–µ—Ä:\n{result_list}"

        await state.update_data(tasks=tasks, selected_discipline=selected_discipline)
        await message.answer(message_text, reply_markup=kb.back_to_main_menu_kb)
        await state.set_state(CheckTask.task_view)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")

# –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è, –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏
@router_main.message(CheckTask.task_view)
async def select_task(message: Message, state: FSMContext):
    state_data = await state.get_data()
    tasks = state_data.get('tasks')
    selected_number = int(message.text.strip()) - 1

    if 0 <= selected_number < len(tasks):
        selected_task = tasks[selected_number]
        await state.update_data(task=selected_task)
        report = crud.get_report(selected_task.task_id)

        if report is None:
            message_text = (f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ:\n{selected_task.task_type}\n{selected_task.task_name}\n"
                            f"{selected_task.task_description}\n–°–¥–∞—Ç—å –¥–æ {selected_task.due_date}\n"
                            f"\n–í—ã –µ—â–µ –Ω–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç")
            await message.answer(message_text, reply_markup=kb.generate_task_view_kb(selected_task.task_id, status="not_sent", report_id=None))
        elif report["report_status"] == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ":
            message_text = (f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ:\n{selected_task.task_type}\n{selected_task.task_name}\n"
                            f"{selected_task.task_description}\n–°–¥–∞—Ç—å –¥–æ {selected_task.due_date}\n"
                            f"\n–í—ã —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç, –Ω–æ –µ–≥–æ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏\n–°–¥–∞–Ω–æ: {report['upload_date']}")
            await message.answer(message_text, reply_markup=kb.generate_task_view_kb(selected_task.task_id, status="sent", report_id=report['report_id']))
        elif report["report_status"] == "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ":
            message_text = (f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ:\n{selected_task.task_type}\n{selected_task.task_name}\n"
                            f"{selected_task.task_description}\n–°–¥–∞—Ç—å –¥–æ {selected_task.due_date}\n"
                            f"\n–í—ã —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç –∏ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏:\n–°–¥–∞–Ω–æ: {report['upload_date']}\n"
                            f"–û—Ü–µ–Ω–∫–∞: {report['score']}/{report['max_score']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {report['teacher_comment']}")
            await message.answer(message_text, reply_markup=kb.generate_task_view_kb(selected_task.task_id, status="checked", report_id=report['report_id']))
        else:
            message_text = (f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ:\n{selected_task.task_type}\n{selected_task.task_name}\n"
                            f"{selected_task.task_description}\n–°–¥–∞—Ç—å –¥–æ {selected_task.due_date}\n"
                            f"\n–í—ã –µ—â–µ –Ω–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç")
            await message.answer(message_text, reply_markup=kb.generate_task_view_kb(selected_task.task_id, status="not_sent", report_id=None))

        await state.set_state(CheckTask.idle)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.")



@router_main.callback_query(F.data.startswith('view_self_report:'))
async def view_report(callback: CallbackQuery):
    selected_report_id = callback.data.split(':')[1]
    await callback.answer('')
    file = crud.get_file_code_for_report(selected_report_id)
    await callback.message.answer_document(file)

# –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@router_main.callback_query(F.data.startswith('file_task:'))
async def browse_task(callback: CallbackQuery):
    selected_task_id = callback.data.split(':')[1]
    await callback.answer('')
    file = crud.get_file_code(selected_task_id)
    await callback.message.answer_document(file)

@router_main.callback_query(F.data.startswith('upload_report:'))
async def upload_report(callback: CallbackQuery, state: FSMContext):
    selected_task_id = callback.data.split(':')[1]
    await callback.answer('')
    await state.set_state(CheckTask.process_file)
    await state.update_data(selected_task_id=selected_task_id)
    await callback.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á–µ—Ç (–º–∞–∫—Å–∏–º—É–º 1 —Ñ–∞–π–ª)", reply_markup=kb.back_to_task_kb)

async def handle_load_report_file(message: Message, state: FSMContext):
    logging.info("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω –¥–ª—è LoadReport.")
    state_data = await state.get_data()
    selected_task_id = state_data.get("selected_task_id")
    file_code = message.document.file_id
    logging.info("–ø–æ–ª—É—á–µ–Ω id —Ñ–∞–π–ª–∞.")
    await message.answer("–ì–æ—Ç–æ–≤–æ. –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.", reply_markup=kb.main_menu_kb)

    try:
        crud.add_report(selected_task_id, str(message.from_user.id), file_code)
        logging.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.clear()


# callback back_to_tasks –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫  —Ñ—É–Ω–∫—Ü–∏–∏ select_discipline c –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ message_tasks(–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è) –∏ state
@router_main.callback_query(F.data == 'back_to_tasks')
async def back_to_tasks(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    message_tasks = state_data.get('message_tasks')
    await state.set_state(CheckTask.discipline)
    await callback.answer('')
    await select_discipline(message_tasks, state)


# —Ñ—É–Ω–∫—Ü–∏—è callback back_to_main_menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–º–µ–Ω—è—â–µ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@router_main.callback_query(F.data == 'back_to_main_menu')
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await state.clear()
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main_menu_kb)