from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import src.db.crud.student_crud as crud
import src.keyboards.student_kb as kb

import logging


logging.basicConfig(level=logging.INFO)
router_main: Router = Router()

# —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–≤ –∑–∞–¥–∞–Ω–∏–π

@router_main.callback_query(F.data == 'show_disciplines_and_teachers')
async def show_disciplines_and_teachers(callback: CallbackQuery):
    await callback.answer('')
    result_list = "\n".join(crud.get_disciplines_and_teachers(str(callback.from_user.id)))
    message_text = f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ | –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏\n{result_list}"

    await callback.message.answer(message_text)

@router_main.callback_query(F.data == 'show_group_members')
async def show_group_members(callback: CallbackQuery):
    await callback.answer('')
    group_number = (crud.get_student_by_telegram_id(str(callback.from_user.id))).group_number
    result_list = "\n".join(crud.get_group_members(str(callback.from_user.id)))
    message_text = f"–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø—ã {group_number}:\n{result_list}"

    await callback.message.answer(message_text)




class CheckTask(StatesGroup):
    discipline = State()
    task_id = State()
    task_view = State()

# –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è
@router_main.callback_query(F.data == 'browse_task')
async def browse_task(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    disciplines = crud.get_student_disciplines(str(callback.from_user.id))
    result_list = "\n".join(f"{i + 1}. {d}" for i, d in enumerate(disciplines))
    message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, –≤–≤–µ–¥—è –µ—ë –Ω–æ–º–µ—Ä:\n{result_list}"

    await callback.message.answer(message_text)
    await state.update_data(disciplines=disciplines)
    await state.set_state(CheckTask.discipline)

# –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
@router_main.message(CheckTask.discipline)
async def select_discipline(message: Message, state: FSMContext):
    state_data = await state.get_data()
    disciplines = state_data.get('disciplines')
    selected_number = int(message.text.strip()) - 1

    if 0 <= selected_number < len(disciplines):
        selected_discipline = disciplines[selected_number]
        await state.update_data(selected_discipline=selected_discipline)
        tasks = crud.get_student_tasks(selected_discipline, str(message.from_user.id))
        result_list = "\n".join(f"{i + 1}.  ‚ùï{d.task_type}\nüîé{d.task_name}\n‚è≥–°–¥–∞—Ç—å –¥–æ {d.due_date}\n" for i, d in enumerate(tasks))
        message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É: {selected_discipline}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –≤–≤–µ–¥—è –µ–≥–æ –Ω–æ–º–µ—Ä:\n{result_list}"

        await state.update_data(tasks=tasks, selected_discipline=selected_discipline)
        await message.answer(message_text)
        await state.set_state(CheckTask.task_view)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")

# –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è, –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏
@router_main.message(CheckTask.task_view)
async def select_task(message: Message, state: FSMContext):
    state_data = await state.get_data()
    tasks = state_data.get('tasks')
    selected_number = int(message.text.strip()) - 1

    if 0 <= selected_number < len(tasks):
        selected_task = tasks[selected_number]
        await state.update_data(task=selected_task)

        message_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ:\n{selected_task.task_type}\n{selected_task.task_name}\n{selected_task.task_description}\n–°–¥–∞—Ç—å –¥–æ {selected_task.due_date}"
        await message.answer(message_text, reply_markup=kb.generate_task_view_kb(selected_task.task_id))
        await state.clear()
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.")


class LoadReport(StatesGroup):
    process_file = State()




# –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@router_main.callback_query(F.data.startswith('file_task:'))
async def browse_task(callback: CallbackQuery):
    selected_task_id = callback.data.split(':')[1]
    await callback.answer('')
    file = crud.get_file_code(selected_task_id)
    await callback.message.answer_document(file)

@router_main.callback_query(F.data.startswith('upload_report:'))
async def upload_report(callback: CallbackQuery, state: FSMContext):
    selected_task_id = callback.data.split(':')[1]
    await callback.answer('')
    await state.set_state(LoadReport.process_file)
    await state.update_data(selected_task_id=selected_task_id)
    await callback.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á–µ—Ç (–º–∞–∫—Å–∏–º—É–º 1 —Ñ–∞–π–ª)")

async def handle_load_report_file(message: Message, state: FSMContext):
    logging.info("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω –¥–ª—è LoadReport.")
    state_data = await state.get_data()
    selected_task_id = state_data.get("selected_task_id")
    file_code = message.document.file_id
    logging.info("–ø–æ–ª—É—á–µ–Ω id —Ñ–∞–π–ª–∞.")
    await message.answer("–ì–æ—Ç–æ–≤–æ. –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

    try:
        crud.add_report(selected_task_id, str(message.from_user.id), file_code)
        logging.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.clear()