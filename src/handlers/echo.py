from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from src.db.db import get_user_by_telegram_id, validate_user_login, update_telegram_id, get_users_by_group_id
import src.keyboards.kb as kb

router_main: Router = Router()

class AuthState(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@router_main.message(CommandStart())
async def send_welcome(message: Message, state: FSMContext):
    user = get_user_by_telegram_id(str(message.from_user.id))
    if user:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.login}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=kb.us_main_menu_kb)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç.", reply_markup=kb.hello_kb)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è callback_data "sign_in"
@router_main.callback_query(F.data == 'sign_in')
async def sign_in_cb(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(AuthState.waiting_for_login)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
@router_main.message(AuthState.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    login = message.text
    await state.update_data(login=login)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthState.waiting_for_password)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
@router_main.message(AuthState.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data.get('login')
    password = message.text.strip()

    user = validate_user_login(login, password)
    if user:
        if not user.telegram_id:
            update_telegram_id(login, str(message.from_user.id))
        await message.answer(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user.login}.", reply_markup=kb.us_main_menu_kb)
        await state.clear()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
@router_main.callback_query(F.data == 'retry_sign')
async def retry_sign_in_cb(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(AuthState.waiting_for_login)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
@router_main.callback_query(F.data == 'contact_support')
async def contact_support_cb(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ email: support@example.com.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def require_login(handler):
    async def wrapper(message_or_callback, *args, **kwargs):
        user = get_user_by_telegram_id(str(message_or_callback.from_user.id))
        if not user:
            if isinstance(message_or_callback, Message):
                await message_or_callback.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É./start")
            else:
                await message_or_callback.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É./start")
            return
        await handler(message_or_callback, *args, **kwargs)
    return wrapper

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@router_main.message(F.text == "üë® –ü—Ä–æ—Ñ–∏–ª—å")
@require_login
async def profile(message: Message):
    user = get_user_by_telegram_id(str(message.from_user.id))
    profile_text = (
        f"üë§ –§–ò–û: {user.fio}\n"
        f"üë®‚Äçüè´ –ê–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞: @{message.from_user.username}\n"
        f"üè´ –ò–Ω—Å—Ç–∏—Ç—É—Ç/—Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {user.institute}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {user.group.name}\n"
        f"üìÉ –ù–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞/ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏: {user.student_id}\n"
        f"üë®‚Äçüî¨ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {user.specialty}\n"
        f"üëÄ –§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {user.form_of_study}\n"
        f"üéì –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {user.education_level}\n"
        f"ü§ë –ë—é–¥–∂–µ—Ç/–∫–æ–Ω—Ç—Ä–∞–∫—Ç: {user.budget_contract}"
    )
    await message.answer(profile_text)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@router_main.message(F.text == "üíÅ‚Äç‚ôÇÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
@require_login
async def info(message: Message):
    info_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
    await message.answer(info_text, reply_markup=kb.us_info_kb)

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è callback_data "us_show_groups"
@router_main.callback_query(F.data == 'us_show_groups')
@require_login
async def show_group_members(callback: CallbackQuery):
    await callback.answer('')
    user = get_user_by_telegram_id(str(callback.from_user.id))
    group_members = get_users_by_group_id(user.group_id)
    if group_members:
        members_list = "\n".join([f"{index + 1}. {member.fio} (@{member.login})" for index, member in enumerate(group_members)])
        await callback.message.answer(f"üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã {user.group.name}:\n{members_list}")
    else:
        await callback.message.answer("–í –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º"
@router_main.message(F.text == "üë©‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")
@require_login
async def contact_admin(message: Message):
    admins_list = "–ê–¥–º–∏–Ω—ã: @NewFail, @Rukople4iy, @ma_lh"
    await message.answer(admins_list)
