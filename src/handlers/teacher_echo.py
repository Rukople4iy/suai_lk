from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import CommandStart
import src.db.crud.teacher_crud as crud
import src.db.crud.common_crud as common_crud
import src.keyboards.teacher_kb as kb
from datetime import datetime
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import logging
from datetime import datetime, timedelta
from tabulate import tabulate

logging.basicConfig(level=logging.INFO)

router_main: Router = Router()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è callback_data "us_show_groups"
from tabulate import tabulate


from tabulate import tabulate

from tabulate import tabulate


@router_main.callback_query(F.data == 'show_teacher_disciplines')
async def show_group_members(callback: CallbackQuery):
    await callback.answer('')
    disciplines = crud.get_teacher_disciplines_groups(str(callback.from_user.id))

    if not disciplines:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    message_text = "*–í–∞—à–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:*\n\n" + "\n".join(
        f"üìö {d['discipline']} (–ì—Ä—É–ø–ø–∞: {d['group_number']})" for d in disciplines
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(message_text, reply_markup=kb.main_menu_kb, parse_mode="Markdown")


class TaskForm(StatesGroup):
    discipline = State()
    groups = State()
    task_name = State()
    task_description = State()
    task_type = State()
    max_score = State()
    due_date = State()
    file_code = State()


@router_main.callback_query(F.data == 'upload_task_teacher')
async def upload_task_teacher(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    await callback.answer('')
    teacher_telegram_id = callback.from_user.id
    disciplines = crud.get_teacher_disciplines(str(teacher_telegram_id))

    if not disciplines:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.")
        return

    discipline_list = "\n".join([f"{idx + 1}. {d['discipline']}" for idx, d in enumerate(disciplines)])
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã\n{discipline_list}", reply_markup=kb.back_to_main_menu_kb)
    await state.set_state(TaskForm.discipline)


@router_main.message(TaskForm.discipline)
async def process_discipline(message: Message, state: FSMContext):
    discipline_choice = int(message.text) - 1
    teacher_telegram_id = message.from_user.id
    disciplines = crud.get_teacher_disciplines(str(teacher_telegram_id))
    chosen_discipline = disciplines[discipline_choice]['discipline']

    await state.update_data(discipline=chosen_discipline)

    groups = crud.get_groups_for_discipline(chosen_discipline)
    if not groups:
        await message.answer("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")
        return

    group_list = "\n".join([f"{g.group_number}" for idx, g in enumerate(groups)])
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n{group_list}", reply_markup=kb.back_to_main_menu_kb)
    await state.set_state(TaskForm.groups)


@router_main.message(TaskForm.groups)
async def process_groups(message: Message, state: FSMContext):
    group_numbers = message.text.split()
    await state.update_data(groups=group_numbers)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", reply_markup=kb.back_to_main_menu_kb)
    await state.set_state(TaskForm.task_name)


@router_main.message(TaskForm.task_name)
async def process_task_name(message: Message, state: FSMContext):
    await state.update_data(task_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", reply_markup=kb.back_to_main_menu_kb)
    await state.set_state(TaskForm.task_description)


@router_main.message(TaskForm.task_description)
async def process_task_description(message: Message, state: FSMContext):
    await state.update_data(task_description=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è\n1. –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n2. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n3. –†–∞—Å—á–µ—Ç–Ω–æ-–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞\n4. –ö—É—Ä—Å–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç (—Ä–∞–±–æ—Ç–∞)\n5. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è\n6. –û—Ç—á–µ—Ç –æ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö\n7. –≠—Å—Å–µ\n8. –†–µ—Ñ–µ—Ä–∞—Ç", reply_markup=kb.back_to_main_menu_kb)
    await state.set_state(TaskForm.task_type)


@router_main.message(TaskForm.task_type)
async def process_task_type(message: Message, state: FSMContext):
    task_types = {
        "1": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        "2": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
        "3": "–†–∞—Å—á–µ—Ç–Ω–æ-–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞",
        "4": "–ö—É—Ä—Å–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç (—Ä–∞–±–æ—Ç–∞)",
        "5": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è",
        "6": "–û—Ç—á–µ—Ç –æ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö",
        "7": "–≠—Å—Å–µ",
        "8": "–†–µ—Ñ–µ—Ä–∞—Ç"
    }
    await state.update_data(task_type=task_types[message.text])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞–¥–∞–Ω–∏—è", reply_markup=kb.back_to_main_menu_kb)
    await state.set_state(TaskForm.max_score)


@router_main.message(TaskForm.max_score)
async def process_max_score(message: Message, state: FSMContext):
    await state.update_data(max_score=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–µ–ª—å–Ω—É—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=kb.back_to_main_menu_kb)
    await state.set_state(TaskForm.due_date)


from datetime import datetime, timedelta

@router_main.message(TaskForm.due_date)
async def process_due_date(message: Message, state: FSMContext):
    due_date_str = message.text
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 1 –¥–Ω—è
        due_date = datetime.strptime(due_date_str, "%d.%m.%Y").date() + timedelta(days=1)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if due_date <= datetime.now().date():
            raise ValueError("–ü—Ä–µ–¥–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –¥–Ω—ë–º
        await state.update_data(due_date=due_date.strftime("%d.%m.%Y"))
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª (–º–∞–∫—Å–∏–º—É–º 1 —Ñ–∞–π–ª)", reply_markup=kb.back_to_main_menu_kb)
        await state.set_state(TaskForm.file_code)

    except ValueError as e:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        await state.set_state(TaskForm.due_date)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async def handle_task_form_file(message: Message, state: FSMContext):
    logging.info("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω –¥–ª—è TaskForm.")
    file_code = message.document.file_id
    logging.info("–ø–æ–ª—É—á–µ–Ω id —Ñ–∞–π–ª–∞.")
    await state.update_data(file_code=file_code)
    logging.info("–§–∞–π–ª id —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
    await message.answer("–ì–æ—Ç–æ–≤–æ. –ó–∞–¥–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.", reply_markup=kb.main_menu_kb)

    # Retrieve data from state and send to database
    data = await state.get_data()
    crud.create_task_for_teacher(
        discipline=data['discipline'],
        group_numbers=data['groups'],
        task_name=data['task_name'],
        task_description=data['task_description'],
        task_type=data['task_type'],
        max_score=data['max_score'],
        due_date=data['due_date'],
        file_code=data['file_code']
    )
    logging.info("–ø–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
    await state.clear()

class CheckReports(StatesGroup):
    discipline_st = State()
    group = State()
    task = State()
    student = State()
    mid_choose = State()
    report = State()
    comment = State()
    estimation = State()
    approve = State()

# –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π
@router_main.callback_query(F.data == 'check_task_teacher')
async def check_task_teacher(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    disciplines = crud.get_teacher_disciplines_task(str(callback.from_user.id))
    if not disciplines:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.")
        return

    result_list = "\n".join(f"{i + 1}. {d}" for i, d in enumerate(disciplines))
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, –≤–≤–µ–¥—è –µ—ë –Ω–æ–º–µ—Ä:\n{result_list}", reply_markup=kb.back_to_main_menu_kb)

    logging.info("—Å–º–µ–Ω–∏–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    await state.set_state(CheckReports.discipline_st)
    await state.update_data(disciplines=disciplines)
    logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")


# –í—ã–±–æ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
@router_main.message(CheckReports.discipline_st)
async def select_discipline_report(message: Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

    logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ö—ç–Ω–¥–ª–µ—Ä: {await state.get_state()}")

    state_data = await state.get_data()
    disciplines = state_data.get('disciplines')
    selected_number = int(message.text.strip()) - 1
    logging.info("–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞")
    if isinstance(selected_number, int) and 0 <= selected_number < len(disciplines):
        logging.info("–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥")
        selected_discipline = disciplines[selected_number]
        groups = crud.get_groups_by_discipline(selected_discipline)
        if not groups:
            await message.answer("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —ç—Ç–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")
            await state.clear()
            return

        result_list = "\n".join(f"{i + 1}. {g.group_number}" for i, g in enumerate(groups))
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤–≤–µ–¥—è –µ—ë –Ω–æ–º–µ—Ä:\n{result_list}", reply_markup=kb.back_to_main_menu_kb)
        await state.update_data(selected_discipline=selected_discipline, groups=groups)
        await state.set_state(CheckReports.group)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")

# –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
@router_main.message(CheckReports.group)
async def select_group_report(message: Message, state: FSMContext):
    state_data = await state.get_data()
    groups = state_data.get('groups')
    selected_number = int(message.text.strip()) - 1
    await state.update_data(message_tasks=message)
    if isinstance(selected_number, int) and 0 <= selected_number < len(groups):
        selected_group = groups[selected_number]
        tasks = crud.get_tasks_by_discipline(state_data.get('selected_discipline'))
        if not tasks:
            await message.answer("–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")
            await state.clear()
            return

        result_list = "\n".join(f"{i + 1}. {t.task_name}" for i, t in enumerate(tasks))
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –≤–≤–µ–¥—è –µ–≥–æ –Ω–æ–º–µ—Ä:\n{result_list}", reply_markup=kb.back_to_main_menu_kb)
        await state.update_data(selected_group=selected_group, tasks=tasks)
        await state.set_state(CheckReports.task)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.")


#callback back_to_main_menu_teacher
@router_main.callback_query(F.data == 'back_to_main_menu_teacher')
async def back_to_main_menu_teacher(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb.main_menu_kb)
    await state.clear()

@router_main.callback_query(F.data == 'back_to_tasks_teacher')
async def back_to_tasks_teacher(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    state_data = await state.get_data()
    message = state_data.get('message_tasks')
    await select_group_report(message, state)


# –í—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è
@router_main.message(CheckReports.task)
async def select_task_report(message: Message, state: FSMContext):
    state_data = await state.get_data()
    tasks = state_data.get('tasks')
    selected_number = int(message.text.strip()) - 1
    await state.update_data(message_student=message)
    if isinstance(selected_number, int) and 0 <= selected_number < len(tasks):
        selected_task = tasks[selected_number]
        students = await crud.get_students_with_reports_status(state_data.get('selected_group').group_number, selected_task.task_id)
        if not students:
            await message.answer("–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
            await state.clear()
            return

        result_list = "\n".join(f"{i + 1}. {s[0].fio} {s[1]}" for i, s in enumerate(students))
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞, –≤–≤–µ–¥—è –µ–≥–æ –Ω–æ–º–µ—Ä:\n{result_list}", reply_markup=kb.choose_student_kb)
        await state.update_data(selected_task=selected_task, students=students)
        await state.set_state(CheckReports.student)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.")


# –í—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞
@router_main.message(CheckReports.student)
async def select_student_report(message: Message, state: FSMContext):
    state_data = await state.get_data()
    students = state_data.get('students')
    selected_number = int(message.text.strip()) - 1

    if isinstance(selected_number, int) and 0 <= selected_number < len(students):
        selected_student, emoji, report = students[selected_number]
        if report:
            task = state_data.get('selected_task')
            await state.update_data(message_estimate=message)
            comment, score = common_crud.get_report_comment_and_score(report.report_id)
            max_score = crud.get_task_max_score_by_report(report.report_id)
            if score != None:

                await message.answer(
                    f"–ó–∞–¥–∞–Ω–∏–µ: {task.task_name}\n–ì—Ä—É–ø–ø–∞: {state_data.get('selected_group').group_number}\n"
                    f"–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞: {selected_student.fio}\n–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {report.upload_date}\n"
                    "\n–û—Ü–µ–Ω–µ–Ω–æ –≤–∞–º–∏:\n"
                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n–û—Ü–µ–Ω–∫–∞: {score}/{max_score}",
                    reply_markup=kb.generate_teacher_report_kb(report.report_id, ischecked=True)
                )
            else:
                await message.answer(
                    f"–ó–∞–¥–∞–Ω–∏–µ: {task.task_name}\n–ì—Ä—É–ø–ø–∞: {state_data.get('selected_group').group_number}\n"
                    f"–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞: {selected_student.fio}\n–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {report.upload_date}\n",
                    reply_markup=kb.generate_teacher_report_kb(report.report_id, ischecked=False)
                )

            await state.set_state()
        else:
            await message.answer("–£ —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–∞.")
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞.")



# @router_main.message(CheckReports.mid_choose)
# async def
#     state_data = await state.get_data()
#     tasks = state_data.get('tasks')


@router_main.callback_query(F.data == 'back_to_students')
async def approve_report(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    state_data = await state.get_data()
    message = state_data.get('message_student')
    await select_task_report(message, state)



@router_main.callback_query(F.data.startswith('view_report:'))
async def view_report(callback: CallbackQuery):
    selected_report_id = callback.data.split(':')[1]
    await callback.answer('')
    file = crud.get_file_code(selected_report_id)
    await callback.message.answer_document(file)

@router_main.callback_query(F.data.startswith('estimate_report:'))
async def estimate_report(callback: CallbackQuery, state: FSMContext):
    selected_report_id = callback.data.split(':')[1]
    await callback.answer('')
    await state.set_state(CheckReports.estimation)
    await state.update_data(selected_report_id=selected_report_id)

    max_score = crud.get_task_max_score_by_report(selected_report_id)
    await state.update_data(max_score=max_score)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–ª—ã (–º–∞–∫—Å. {max_score}):")

@router_main.message(CheckReports.estimation)
async def set_estimation_report(message: Message, state: FSMContext):
    user_input = message.text
    max_score = (await state.get_data()).get('max_score')

    try:
        score = float(user_input)
        if 0 <= score <= max_score:
            await state.update_data(score=score)
            await message.answer("–ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç—á–µ—Ç—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:")
            await state.update_data(score=score)
            await state.set_state(CheckReports.comment)
            # –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        else:
            raise ValueError("Invalid score range")
    except ValueError:
        await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ {max_score}.")


@router_main.message(CheckReports.comment)
async def set_comment_report(message: Message, state: FSMContext):
    user_input = message.text
    await state.update_data(comment=user_input)
    await state.set_state(CheckReports.approve)
    max_score = (await state.get_data()).get('max_score')
    score = (await state.get_data()).get('score')
    await message.answer(f"–û—Ü–µ–Ω–∫–∞: {score}/{max_score}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:{user_input}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç—É:", reply_markup=kb.approve_report_kb)

# –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
@router_main.callback_query(F.data == 'approve_report')
@router_main.message(CheckReports.approve)
async def approve_report(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    data = await state.get_data()
    selected_report_id = data.get('selected_report_id')
    score = data.get('score')
    comment = data.get('comment')
    result = crud.save_report_details(selected_report_id, score, comment)
    await callback.message.answer("–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!" if result == "–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ." else result)
    state_data = await state.get_data()
    message_estimate = state_data.get('message_estimate')
    await select_task_report(message_estimate, state)



@router_main.callback_query(F.data == 'reject_report')
@router_main.message(CheckReports.approve)
async def reject_report(callback: CallbackQuery, state: FSMContext):
    await callback.answer('')
    state_data = await state.get_data()
    message_estimate = state_data.get('message_estimate')
    await callback.message.answer("–û—Ü–µ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    await select_student_report(message_estimate, state)