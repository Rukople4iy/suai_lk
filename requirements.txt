
–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–ª–∞ —Å –∫–∞–∫–∏–º —Ä–æ—É—Ç–µ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ä–æ–ª–∏(–æ–Ω–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ user (telegram_id, role))


wsgi.py:
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from config import Config, load_config
import src.handlers.student_echo as student_echo
import src.handlers.admin_echo as admin_echo
import src.handlers.guest_echo as guest_echo
import src.handlers.teacher_echo as teacher_echo
from src.db.db import init_db
from src.db.models import Base

async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(filename)s:%(lineno)d #%(levelname)-8s [%(asctime)s] - %(name)s - %(message)s",
    )

    logging.info("Starting bot")
    init_db(Base)
    config: Config = load_config()

    bot_main = Bot(token=config.tg_bot_main.token)
    storage = MemoryStorage()
    dp_main = Dispatcher(bot=bot_main, storage=storage)

    dp_main.include_router(guest_echo.router_guest)
    dp_main.include_router(student_echo.router_student)
    dp_main.include_router(admin_echo.router_admin)
    dp_main.include_router(teacher_echo.router_teacher)

    await bot_main.delete_webhook(drop_pending_updates=True)
    await dp_main.start_polling(bot_main)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped")


guest_echo.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
import src.handlers.student_echo as student_echo
import src.handlers.teacher_echo as teacher_echo
import src.handlers.admin_echo as admin_echo
import src.db.crud.common_crud as crud
import src.keyboards.student_kb as student
import src.keyboards.teacher_kb as teacher
import logging

logging.basicConfig(level=logging.INFO)

router_guest: Router = Router()

@router_guest.message(F.text)
async def universal_handler(message: Message):
    user = crud.get_user_by_telegram_id(str(message.from_user.id))
    if user.role == 'student':
        logging.info(f"user rerout: {user.role}")
        await student_echo.handle_message(message)
    elif user.role == 'teacher':
        logging.info(f"user rerout: {user.role}")
        await teacher_echo.handle_message(message)
    elif user.role == 'admin':
        logging.info(f"user rerout: {user.role}")
        await admin_echo.handle_message(message)

    else:
        logging.info(f"user rerout: unknown (guest)")
        await guest_echo.handle_message(message)

#        logging.info(f"user rerout: {user.role}")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@router_guest.message(CommandStart())
async def send_welcome(message: Message):
    user = crud.get_user_by_telegram_id(str(message.from_user.id))
    if user:
        if user.role == 'student':
            kb = student
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.role}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=kb.us_main_menu_kb)
        else :
            kb = teacher
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.role}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=kb.us_main_menu_kb)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. @NewFail")


student_echo.py(–µ—Å—Ç—å –µ—â–µ teacher_echo.py –∏ –æ–Ω–∏ –Ω–µ–º–Ω–æ–≥–æ —Å—Ö–æ–∂–∏ –Ω–æ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏):
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
import src.db.crud.student_crud as crud
import src.keyboards.student_kb as kb
from src.handlers.common_echo import require_role

router_student: Router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "üë® –ü—Ä–æ—Ñ–∏–ª—å" —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–æ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
@router_student.message(F.text == "üë® –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_student(message: Message):
    student = crud.get_student_by_telegram_id(str(message.from_user.id))
    if student:
        profile_text = (
            f"üë§ –§–ò–û: {student.fio}\n"
            f"üë®‚Äçüè´ –ê–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞: @{message.from_user.username}\n"
            f"üè´ –ò–Ω—Å—Ç–∏—Ç—É—Ç/—Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {student.group.institute}\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {student.group.group_number}\n"
            f"üë®‚Äçüî¨ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {student.group.specialty}\n"
            f"üëÄ –§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {student.group.form_of_study}\n"
            f"üéì –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {student.group.education_level}\n"
            f"ü§ë –ë—é–¥–∂–µ—Ç/–∫–æ–Ω—Ç—Ä–∞–∫—Ç: {student.budget_contract}"
        )
        await message.answer(profile_text)


common_crud.py:
from sqlalchemy.orm import joinedload
from src.db.db import SessionLocal
from src.db.models import Users
import logging

logging.basicConfig(level=logging.INFO)

def get_user_by_telegram_id(tg_id):
    db = SessionLocal()
    user = db.query(Users).filter(Users.telegram_id == tg_id).first()
    logging.info(f"user requested: {user.role, user.telegram_id}")
    db.close()
    return user


