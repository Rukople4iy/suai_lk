сделай реализацию хендлеров и состояния в котором я буду заполнять содержимое задания

@router_main.callback_query(F.data == 'upload_task_teacher')
async def upload_task_teacher(callback: CallbackQuery):


этапы заполнения (параллельно всегда можно нажать кнопку "отмена")
1.Вывод списка дисциплин преподавателя с нумерацией
(запрос в базу по дисциплинам, оставь строку как "запрос = запрос")
(1. Базы данных
2. АСМ
3. УФА )
Вывод текста: “Введите номер дисциплины” (сохраняем информацию о дисциплине в состоянии)

2. Вывод списка групп с нумерацией:
(запрос в базу списка групп по выбранной дисциплине, оставь строку как "запрос = запрос")
(1. М222
2. 2345
3. 1234 )
Вывод текста: “Введите номера групп через пробел” (из строкового делаем список групп, сохраняем в состояние)

3. Вывод текста: “Введите наименование задания” (Сохраняем в состояние)

4. Вывод текста: “Введите описание задания” (Сохраняем в состояние)

5. Вывод типов работ преподавателя с нумерацией
(Типы работ:
1 Лабораторная работа
2 Индивидуальное задание
3 Расчетно-графическая работа
4 Курсовой проект (работа)
5 Практические задания
6 Отчет о научных исследованиях
7 Эссе
8 Реферат
)
Вывод текста: “Введите номер типа задания” (Сохраняем в состояние тип работы, который соответствует введенному числу)


6. Вывод текста: “Введите количество баллов задания” (Сохраняем в состояние)

7. Вывод текста: “Введите предельную дату выполнения в формате ДД.ММ.ГГГГ” (Сохраняем в состояние)

8. Вывод текста: “Загрузите дополнительный материал (максимум 1 файл)
(через message(F.file) сохраняем значение "кода" файла в системе телеграма (message.file.file_id)  в состояние)A

9. Вывод текста: “Готово” (Все данные из состояния формируются в функцию отправки)

функция отправки задания в базу данных
def create_task_for_teacher(discipline, group_numbers, task_name, task_description, task_type, max_score, due_date, file_code):
    db = SessionLocal()

    try:
        # Проверяем существует ли дисциплина
        disc = db.query(Discipline).filter(Discipline.discipline == discipline).first()
        if not disc:
            logging.error(f"Дисциплина {discipline} не найдена.")
            return "Дисциплина не найдена."

        # Создаем задание
        new_task = Task(
            discipline=discipline,
            task_name=task_name,
            task_description=task_description,
            task_type=task_type,
            max_score=max_score,
            due_date=datetime.strptime(due_date, '%d.%m.%Y'),
            file_id=file_code,
            teacher_number=disc.teacher_number  # Предполагается, что дисциплина связана с преподавателем
        )

        db.add(new_task)
        db.commit()
        db.refresh(new_task)

        # Создаем задания для каждой группы
        for group_number in group_numbers:
            group = db.query(Group).filter(Group.group_number == group_number).first()
            if not group:
                logging.error(f"Группа {group_number} не найдена.")
                continue

            group_task = GroupTask(
                group_number=group_number,
                task_id=new_task.task_id
            )
            db.add(group_task)

        db.commit()
        logging.info("Задание успешно создано и добавлено в группы.")
        return "Задание успешно создано и добавлено в группы."

    except Exception as e:
        logging.error(f"Произошла ошибка при создании задания: {e}")
        db.rollback()
        return f"Ошибка: {e}"
    finally:
        db.close()
